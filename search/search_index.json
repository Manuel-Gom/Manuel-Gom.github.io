{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido a mi Proyecto","text":"<p>Aqu\u00ed puedes encontrar los temas y pr\u00e1cticas disponibles:</p>"},{"location":"#temas-despliegue-de-aplicaciones-web","title":"Temas Despliegue de Aplicaciones Web","text":"<p>Haz clic en cada tema para ver las pr\u00e1cticas relacionadas.</p>"},{"location":"daw/tema-1/ssh-debian/","title":"Pr\u00e1ctica 1","text":"<p>Tema 1: Instalaci\u00f3n y configuraci\u00f3n de Debian</p> <p>Autor: Manuel G\u00f3mez Ruiz</p> <p>Fecha: 13/10/2024</p> <p>Asignatura: Despliegue de Aplicaciones Web</p> <p>Curso: 2\u00ba Desarrollo de Aplicaciones Web</p>"},{"location":"daw/tema-1/ssh-debian/#objetivo-de-la-practica-configurar-un-entorno-seguro-de-conexion-y-administracion-remota-entre-un-cliente-y-un-servidor-debian-utilizando-ssh","title":"Objetivo de la Pr\u00e1ctica: Configurar un entorno seguro de conexi\u00f3n y administraci\u00f3n remota entre un cliente y un servidor Debian utilizando SSH.","text":"<p>Una vez instalado el servidor Debian, ve al terminal e introduce el comando ip a para ver su IP, tambi\u00e9n recuerda hacer un sudo apt update &amp;&amp; sudo apt upgrade (y habilita la instalaci\u00f3n del servidor FTP en el proceso de instalaci\u00f3n, en caso contrario, instala el paquete vsftpd o busca ayuda)</p> <p>Gu\u00e1rdate el nombre de usuario y la IP del servidor, ve a la terminal de tu cliente e introduce el comando ssh -l usuario-servidor ip-servidor</p>"},{"location":"daw/tema-1/ssh-debian/#otorgar-permisos-a-nuestro-usuario","title":"Otorgar permisos a nuestro usuario.","text":"<p>Haz un sudo nano /etc/sudoers o /etc/sudoers.tmp dentro de este fichero introduce el nombre de usuario de tu servidor y otorgale permisos de sudo (administrador) a\u00f1adiendo la siguiente l\u00ednea al script: usuario-servidor ALL=(ALL:ALL) ALL</p> <p>Finalizamos la sesi\u00f3n por SSH y comprobamos que tenemos permisos en el usuario del cliente con los comandos: sudo -v y timeout 2 sudo id &amp;&amp; echo Access granted || echo Access Denied</p>"},{"location":"daw/tema-1/ssh-debian/#configuracion-de-ssh","title":"Configuraci\u00f3n de SSH","text":"<p>Creamos el par de claves p\u00fablica y privada en el cliente con el comando ssh-keygen -b 4096</p> <p>Instalamos las claves p\u00fablicas SSH de nuestro cliente en nuestro servidor, para as\u00ed evitar que el cliente tenga que autentificarse cada vez que quiera acceder al servidor, usa el comando:  ssh-copy-id usuario-servidor@ip-servidor</p> <p>Por motivos de seguridad, en nuestro servidor damos acceso a la carpeta que contiene las claves SSH solo al usuario que cre\u00f3 el directorio, usa los comandos: chmod 700 .ssh/ y chmod 600 .ssh/authorized_keys</p> <p>Inicia sesi\u00f3n en el servidor desde el cliente: ssh usuario-servidor@ip-servidor</p>"},{"location":"daw/tema-2-nginx/autenticacion/","title":"Pr\u00e1ctica 3 - Autenticaci\u00f3n","text":"<p>Tema 2 - Arquitectura Web. Implantaci\u00f3n y administraci\u00f3n de servidores web.</p> <p>Autor: Manuel G\u00f3mez Ruiz</p> <p>Fecha: 14/10/2024</p> <p>Asignatura: Despliegue de Aplicaciones Web</p> <p>Curso: 2\u00ba Desarrollo de Aplicaciones Web</p>"},{"location":"daw/tema-2-nginx/ftp-https/","title":"Pr\u00e1ctica 2 - Instalaci\u00f3n y configuraci\u00f3n","text":"<p>Tema 2 - Arquitectura Web. Implantaci\u00f3n y administraci\u00f3n de servidores web.</p> <p>Autor: Manuel G\u00f3mez Ruiz</p> <p>Fecha: 14/10/2024</p> <p>Asignatura: Despliegue de Aplicaciones Web</p> <p>Curso: 2\u00ba Desarrollo de Aplicaciones Web</p>"},{"location":"daw/tema-2-nginx/ftp-https/#objetivo-de-la-practica-instalar-y-configurar-un-servidor-web-nginx-en-un-sistema-operativo-debian-de-tal-forma-que-permita-conexiones-por-https-y-ftp","title":"Objetivo de la pr\u00e1ctica: Instalar y configurar un servidor web Nginx en un Sistema Operativo Debian, de tal forma que permita conexiones por HTTPS y FTP.","text":""},{"location":"daw/tema-2-nginx/ftp-https/#instalacion-servidor-web-nginx","title":"Instalaci\u00f3n servidor web Nginx.","text":"<p>Primero, actualiza los repositorios de tu Sistema Operativo con los comandos sudo apt update &amp;&amp; sudo apt upgrade.</p> <p>Instala el paquete correspondiente que contiene el servidor Nginx sudo apt install nginx</p> <p>Comprueba que se haya instalado correctamente y que el servicio est\u00e9 activo, para ello utilizaremos el comando sudo systemctl status nginx para verificar el estado.</p> <p>Crea las carpetas que alojar\u00e1n tu sitio web, para ello usaremos el comando mkdir -p que crea m\u00faltiples carpetas de manera recursiva, nosotros crearemos dentro de /var/www una carpeta que se llamar\u00e1 como el nombre de nuestro servidor web y dentro de esta una carpeta que contendr\u00e1 nuestro HTML, esas carpetas almacenar\u00e1n los archivos de nuestro sitio web.</p> <p>Nos dirigimos a la carpeta html reci\u00e9n creada y hacemos una clonaci\u00f3n de un sitio web de GitHub con el comando git clone https://github.com/cloudacademy/static-website-example, esto copiar\u00e1 el repositorio de CloudAcademy haciendo que tengamos una plantilla para nuestro sitio web.</p> <p>Ahora nos aseguramos de que el servidor Nginx tenga los permisos adecuados para acceder y servir los archivos, utilizando los comandos sudo chown -R www-data:www-data /var/www/carpeta-sitio-web/html y sudo chmod -R /var/www/carpeta-sitio-web</p> <p>Hacemos un ip a, copiamos la IP y la ponemos en el navegador, deber\u00eda de aparecer una pa\u01f5ina con un mensaje que diga Welcome to nginx!</p>"},{"location":"daw/tema-2-nginx/ftp-https/#configuracion-de-servidor-web-nginx","title":"Configuraci\u00f3n de servidor web Nginx","text":"<p>Creamos y editamos el archivo de configuraci\u00f3n del sitio web para personalizar Nginx, utilizando el comando sudo nano /etc/nginx/sites-available/sitio-web</p> <p>(No hace falta que el archivo que vamos a crear tenga el mismo nombre que la carpeta en la que almacenamos nuestro archivos del sitio web /var/www/sitio-web, aunque ser\u00eda una buena pr\u00e1ctica, para mantener una estructura clara y organizada, lo mismo ocurre con el par\u00e1metro del fichero server_name)</p> <pre><code>    server {\n        listen 80;\n        listen [::]:80;\n        server_name sitio-web;\n        root /var/www/carpeta-sitio-web/html/static-website-example;\n        index index.html index.html nginx-debian.html;\n        location / {\n            try_files $uri $uri/= 404;\n        }\n    }\n</code></pre> <p>Hacemos el enlace simb\u00f3lico para hacer que Nginx reconozca nuestro sitio web como activo, agreg\u00e1ndolo a la carpeta sites-enabled y as\u00ed que est\u00e9 disponible en el servidor, utiliza el comando sudo ln -s /etc/sites-available/sitio-web /etc/nginx/sites-enabled/</p> <p>Haz un sudo systemctl restart nginx para que se actualicen los cambios y un sudo systemctl status nginx para comprobar que se han aplicado correctamente.</p> <p>En caso de error, revisa el error que te devuelve al hacer el status y comprueba que el fichero de configuraci\u00f3n /etc/nginx/sites-available/sitio-web est\u00e1 bien escrito, cuando lo corrijas vuelve a hacer un restart.</p> <p>En nuestra m\u00e1quina anfitriona, entra a la ruta C:\\Windows\\SYstem32\\drives\\etc\\hosts con permisos de administrador y a\u00f1ade en la \u00faltima l\u00ednea la IP del servidor Debian junto al server_name que hayas a\u00f1adido en tu fichero /etc/nginx/sites-available/sitio-web, esto har\u00e1 que podamos acceder al sitio web de nuestra m\u00e1quina virtual tambi\u00e9n desde nuestro anfitri\u00f3n con su IP.</p> <p>Comprobamos que las peticiones se est\u00e9n registrando en los archivos de registro (logs) de Nginx, con los comandos sudo cat /var/log/nginx/access.log y sudo cat /var/log/nginx/error.log</p>"},{"location":"daw/tema-2-nginx/ftp-https/#ftp","title":"FTP","text":"<p>Para configurar un servidor FTP en Debian y as\u00ed permitir la transferencia de archivos, debemos de instalar vsftpd, que es un servidor FTP ligero y seguro, usa el comando: sudo apt install vsftpd</p> <p>Una vez instalado, en el Home crea una carpeta llamada FTP, que ser\u00e1 a la que acceder\u00e1n los clientes a trav\u00e9s del puerto 21, para la subida o descarga de archivo, comando: mkdir /home/nombre-usuario/ftp</p> <p>Entra al fichero /etc/vsftpd.conf, para permitir el acceso a usuarios locales, a\u00f1adir SSL, certificado, etc\u00e9tera.</p> <pre><code>    rsa_cert_file=/etc/ssl/private/vsftpd.pem\n    rsa_private_key=/etc/ssl/private/vsftpd.pem\n    ssl_enable=YES\n    allow_annon_ssl=NO\n    force_local_data_ssl=YES\n    force_local_logins_ssl=YES\n    ssl_tlsv1=YES\n    ssl_sslv2=NO\n    ssl_sslv3=NO\n    require_ssl_reuse=NO\n    ssl_cipher=HIGH\n\n    local_root=/home/nombre-usuario/ftp\n</code></pre> <p>Reiniciamos el servicio vsftpd para que los cambios hagan efecto, sudo systemctl restart --now vsftpd y haz un sudo systemctl status vsftpd, al igual que dije antes debe devolver active(running), en caso contrario es que algo haz escrito mal en el archivo de configuraci\u00f3n /etc/vsftpd.conf, mira el mensaje de error que devuelve y corrige el error, antes de volver a intentar otro restart.</p> <p>Instala Filezilla en el equipo principal y realiza un conexi\u00f3n FTP al servidor Debian a trav\u00e9s del puerto 21, para ello necesitar\u00e1s la IP del servidor, su nombre de usuario y contrase\u00f1a.</p> <p>Al hacerlo deber\u00eda de aparecernos un certificado de seguridad, dale a aceptar y podr\u00e1s acceder a la carpeta ftp del servidor con \u00e9xito.</p> <p>Tambi\u00e9n puedes acceder al servidor a trav\u00e9s del puerto 22, aunque no es recomendado por motivos de seguridad ya que tendr\u00edas acceso a todo el contenido del servidor de forma remota.</p>"},{"location":"daw/tema-2-nginx/ftp-https/#https","title":"HTTPS","text":"<p>Para habilitar la seguridad de tu sitio web, es importante configurar el HTTPS, que garantiza que la informaci\u00f3n entre el cliente y el servidor est\u00e9 cifrada. Para ello, necesitaremos crear un certificado SSL.</p> <p>Primero, instala openssl, herramienta fundamental para generar certificados SSL, usa el comando sudo apt install openssl</p> <p>Genera el certificado de seguridad, utilizando el comando sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt</p> <p>Configuramos Nginx para que utilice HTTPS. Para ello, edita el archivo de configuraci\u00f3n usando sudo nano /etc/nginx/sites-availables/sitio-web, y a\u00f1ade las rutas al certificado, la clave privada y asegurate que Nginx escuche en el puerto 443.</p> <pre><code>    server {\n        listen 80;\n        listen [::]:80;\n        server_name sitio-web.com www.sitio-web.com;\n        root /var/www/carpeta-sitio-web;\n        index index.html index.html index.nginx-debian.html;\n        return 301 https://$server_name$request_uri/;\n    }\n\n    server {\n        listen 443 ssl;\n        server_name sitio-web.com www.sitio-web.com;\n        ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;\n        ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;\n        root /var/www/carpeta-sitio-web;\n        index index.html;\n        location / {\n            try_files $uri $uri/ = 404;\n        }\n    }\n\n</code></pre> <p>Comprobamos con el comando nginx -t que la sintaxis y la configuraci\u00f3n son v\u00e1lidas.</p> <p>Modificamos nuestro nuestro fichero host en la m\u00e1quina anfitri\u00f3n, con las direcciones a\u00f1adidas anteriormente a server_name.</p> <p>Nos dirigimos a /var/www/sitio-web/, hacemos un sudo rm -rdf ./html y reiniciamos el servidor Nginx.</p> <p>Comprobamos ahora, conectandonos desde el anfitri\u00f3n que funcionan las conexiones HTTP y HTTPS, para ello introduce http://www.nombre-servidor.com y https://www.nombre-servidor.com, el resultado deber\u00eda ser el visualizado de una nueva plantilla web, pero si entras por HTTP te avisar\u00e1 que la conexi\u00f3n no es segura.</p>"},{"location":"daw/tema-2-nginx/mkdocs/","title":"Pr\u00e1ctica 1 - Mkdocs","text":"<p>Tema 2 - Arquitectura Web. Implantaci\u00f3n y administraci\u00f3n de servidores web.</p> <p>Autor: Manuel G\u00f3mez Ruiz</p> <p>Fecha: 14/10/2024</p> <p>Asignatura: Despliegue de Aplicaciones Web</p> <p>Curso: 2\u00ba Desarrollo de Aplicaciones Web</p>"},{"location":"daw/tema-2-nginx/mkdocs/#objetivo-de-la-practica-instalacion-y-configuracion-de-herramientas-clave-para-la-documentacion-y-desarrollo-de-proyectos-en-linux","title":"Objetivo de la pr\u00e1ctica: Instalaci\u00f3n y configuraci\u00f3n de herramientas clave para la documentaci\u00f3n y desarrollo de proyectos en Linux.","text":"<p>Actualizamos repositorios: sudo apt update* y sudo apt upgrade**</p> <p>En los sistemas operativos de Linux, la gesti\u00f3n de paquetes se realiza de forma centralizada para evitar que pip realice cambios que podr\u00edan romper el sistema, interfiriendo con los paquetes gestionados con apt.</p> <p>Para evitar problemas de este tipo lo mejor es usar un entorno virtual.</p> <p>Pero primero comprobemos si tenemos instalado Python 3, con python3 \u2013version, en caso contrario lo instalamos con sudo apt install python3</p> <p>Hacemos lo mismo con pip, escribe pip3 \u2013version y si no esta instalado introduce el comando sudo apt install python3-pip</p> <p>Instalamos el m\u00f3dulo venv: sudo apt install python3-venv</p> <p>Creamos un entorno virtual: python3 -m venv myenv</p> <p>Activamos el entorno virtual: source myenv/bin/activate</p> <p>Recuerda usar el comando deactivate para salir del entorno virtual</p> <p>Ahora dentro del entorno instalamos el paquete de mkdocs: pip install mkdocs-material</p> <p>Si pese a los problemas que puede ocasionar, no queremos instalarlo en el entorno virtual sino en el equipo, utiliza el siguiente comando:  sudo pip install mkdocs-material \u2013break-system-packages</p> <p>Crea una carpeta en el directorio donde quieras que se ubique tu proyecto y realiza el comando mkdocs new .</p> <p>El comando anterior iniciar\u00e1 la documentaci\u00f3n de tu proyecto usando un ejecutable mkdocs.</p> <p>Entra al fichero mkdocs.yml y a\u00f1ade las siguientes l\u00edneas:</p> <p>site_url: https://mydomain.org/mysite theme: name: material</p> <p>Ten en cuenta que el valor de site_url o site_name no tienen porque estar asociados al nombre de tu carpeta, pon el que quieras.</p> <p>A\u00f1adimos la documentaci\u00f3n de nuestro proyecto, para ello voy a necesitar un editor de texto, por lo que voy a descargar Visual Studio Code mediante comandos.</p> <p>Primero instalamos las dependencias requeridas.</p> <p>sudo apt update</p> <p>sudo apt install software-properties-common apt-transport-https wget</p> <p>A\u00f1adimos la clave GPG de Microsoft.</p> <p>wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /usr/share/keyrings/packages.microsoft.gpg</p> <p>A\u00f1adimos el Repositorio de Visual Studio Code.</p> <p>echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\" | sudo tee /etc/apt/sources.list.d/vscode.list</p> <p>Actualizamos el \u00edndice de paquetes.</p> <p>sudo apt update</p> <p>Instalamos Visual Studio Code</p> <p>sudo apt install code</p> <p>Para ejecutarlo escribe el comando code</p> <p>Una vez redactado tu proyecto utiliza el comando mkdocs serve</p> <p>Este comando se utiliza para iniciar un servidor de desarrollo local y previsualizar el sitio de documentaci\u00f3n mientras lo editas.</p> <p>Luego usa mkdocs build que genera los archivos est\u00e1ticos como HTML, prepar\u00e1ndolos para ser desplegados.</p> <p>Ahora debes de almacenar esa documentaci\u00f3n en alg\u00fan lado, para ello vamos a crear una p\u00e1gina web asociada a nuestro GitHub gracias a GitHub Pages, esto har\u00e1 que cada vez que hagas cambios en tu documentaci\u00f3n se actualice autom\u00e1ticamente en GitHub Pages y por lo tanto en tu p\u00e1gina web.</p> <p>Accede a tu GitHub personal y crea un nuevo directorio, el cual debe tener como nombre tu usuario en Github y la siguiente extensi\u00f3n: usuario-github.github.io</p> <p>Una vez creada, en tu Visual crea las carpetas .github/workflows/ci.yml dentro de la ra\u00edz de tu proyecto (la carpeta docs/ no es la ra\u00edz) y a\u00f1ade el script, este archivo configurar\u00e1 GitHub Actions para que cada vez que hagas un push en tu repositorio, construya y despliegue tu sitio de documentaci\u00f3n.</p> <p>Para subir toda nuestra documentaci\u00f3n a GitHub primero debemos instalarlo y enlazarlo con nuestro usuario de GitHub:</p> <p>sudo apt install git</p> <p>git config \u2013global user.name \u201ctu -usuario\u201d</p> <p>git config \u2013global user.email \u201ctu-correo\u201d</p> <p>Realizamos los comandos t\u00edpicos para subir tus documentos al repositorio.</p> <p>git init</p> <p>git remote add origin url-nuevo-repositorio.git</p> <p>git add .</p> <p>git commit -m \u2018Nuevo commit\u2019</p> <p>git push -u origin main</p> <p>Si es la primera vez que subes contenido en tu GitHub deber\u00e1s de crear un token de acceso personal, c\u00f3pialo en alg\u00fan sitio y no lo pierdes, ya que este ser\u00e1 tu clave de acceso a Github, es parecido a la clave de superusuario, es una herramienta para mayor seguridad y evitar as\u00ed que podamos ser hackeados y borren nuestros repositorios o los modifiquen sin permiso.</p> <p>Si al subirse los cambios al repositorio, ves que ha habido un problema en el despliegue por Jekyll crea un archivo vac\u00edo llamado .nojekyll</p> <p>Ve a Settings del repositorio &gt; Pages y comprueba que la rama que est\u00e1 siendo desplegada es gh-pages y la ruta es / (root), si ese no es el caso, modif\u00edcalo t\u00fa mismo.</p> <p>Espera unos minutos hasta que se genera tu sitio web.</p>"}]}